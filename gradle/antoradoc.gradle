/*
 * Copyright (c) 2024 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.file.Files

// Antora documentation is actually built from docs sub project which is not part of the root project
// (because docs requires JDK17+ to build properly)
// The docsZip is however part of the reactor-kafka root project and will include generated docs zip
// in the publication for reactor-kafka artifact.
// Note that if JDK version used is lower than 17 and if docs has not been previously generated, then
// docsZip task won't publish any docs.
// To publish the doc, either use JDK17+ version when running ./gradlew publishToMavenLocal, or
// build the doc with a JDK17+ version, and then using JDK17- version, do ./gradlew publishToMavenLocal
configure(rootProject) {
  task docsZip(type: Zip) {
    def docsDir = file('docs/build/site')

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
      logger.lifecycle("Adding dependency on :docs:antora (JDK version is >= 17)")
      dependsOn(':docs:antora')
    } else if (!docsDir.exists() || !Files.list(docsDir.toPath()).findFirst().isPresent()) {
      logger.lifecycle("Docs directory does not exist and JDK version is lower than 17. Skipping docsZip task.")
      enabled = false
    }

    archiveBaseName.set("reactor-kafka")
    archiveClassifier.set('docs')
    def isSnapshot = project.version.endsWith('-SNAPSHOT')
    def version = isSnapshot ? project.version.takeWhile { it != '-' } : project.version
    boolean forcePdf = project.hasProperty('forcePdf')

    from('docs/build/site') {
      into 'docs'
    }

    if (!isSnapshot || forcePdf) {
      def pdfFile = file("docs/build/assembler/reactor-kafka/${version}/reactor-kafka-reference-guide.pdf")
      logger.lifecycle("${pdfFile} will be included in docs zip")
      from(pdfFile) {
        rename { fileName ->
          "docs/reactor-kafka-reference-guide-${project.version}.pdf"
        }
      }
    }
  }
}
