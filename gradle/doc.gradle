/*
 * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configure(allprojects) { project ->

    apply plugin: "java"

    javadoc {
        dependsOn jar
        group = "Reactor Kafka Javadoc"

        description = "Generates Javadoc API documentation."
        title = "Reactor Kafka $project.version"

        if (JavaVersion.current().isJava8Compatible()) {
            compileTestJava.options.compilerArgs += "-parameters"
            tasks.withType(Javadoc) {
              options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = false
        options.header = "Reactor Kafka"
        options.overview = "$rootDir/src/api/overview.html"
        options.stylesheetFile = rootProject.file("src/api/stylesheet.css")
        options.links(rootProject.ext.javadocLinks)

        maxMemory = "1024m"
        destinationDir = new File(buildDir, "docs/javadoc")
        source project.sourceSets.main.allJava
        exclude "**/internals/**"
        doFirst {
          classpath = files(project.sourceSets.main.compileClasspath)
        }
    }
}

configure(rootProject) {

    apply plugin: 'org.asciidoctor.convert'
    asciidoctor {
        sourceDir "${rootProject.projectDir}/src/docs/asciidoc"
        sources {
            include "index.asciidoc"
        }
        outputDir file("$buildDir/asciidoc")
        backends = ['html5', 'pdf']
        logDocuments = true
        options = [
                doctype: 'book'
        ]
        attributes docinfo: '',
                toc2: '',
                'compat-mode': '',
                stylesdir: "stylesheets/",
                stylesheet: 'golo.css',
                appversion: "$rootProject.version",
                'source-highlighter': 'coderay'
    }
    task docsZip(type: Zip, dependsOn: asciidoctor) {
        baseName = 'reactor-kafka-docs'
        afterEvaluate() {
            //we copy the pdf late, when a potential customVersion has been applied to rootProject
            from("$buildDir/asciidoc/pdf/index.pdf") {
                into ("docs/")
                rename("index.pdf", "reactor-kafka-reference-guide-${rootProject.version}.pdf")
            }
        }
        from("$buildDir/asciidoc/html5/index.html") { into("docs/") }
        from("$buildDir/asciidoc/html5/images") { into("images/") }
    }
}
