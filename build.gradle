/*
 * Copyright (c) 2011-2021 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/plugins-release" }
  }
  dependencies {
    classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.4'
  }
}
plugins {
  id 'org.asciidoctor.convert' version '1.5.12'
  id "com.jfrog.artifactory" version "4.15.2" apply false
}

ext {
  gradleScriptDir = "${rootProject.projectDir}/gradle"

  //reactor core version is now defined in gradle.properties
  kafkaVersion = '2.8.1'
  scalaVersion = '2.11'
  metricsVersion = '2.2.0'

  googleJsr305Version = '3.0.2'
  argparseVersion = '0.5.0'
  joptVersion = '4.9'

  slf4jVersion = '1.7.30'
  log4jVersion = '2.17.0'
  junitVersion = '4.12'
  powermockVersion = '1.7.4'
  testcontainersVersion = '1.16.2'

  javadocLinks = ["https://docs.oracle.com/javase/8/docs/api/",
                  "https://kafka.apache.org/10/javadoc/",
                  "https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
                  "https://projectreactor.io/docs/core/release/api/"] as String[]


}

apply from: "$gradleScriptDir/doc.gradle"
apply from: "$gradleScriptDir/releaser.gradle"

configurations.all {
  // check for snapshot updates every time
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

allprojects {
  apply plugin: 'jacoco'
  jacoco {
    toolVersion = '0.8.1'
  }
}

configure(allprojects) { project ->
  group = 'io.projectreactor.kafka'

  repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }

    if (version.endsWith('-SNAPSHOT')) {
      maven { url 'https://repo.spring.io/snapshot' }
    }

//    maven { url 'https://repository.apache.org/content/groups/staging/' }

  }

  apply plugin: 'maven'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'checkstyle'
  apply plugin: 'java'
  apply from: "$gradleScriptDir/setup.gradle"

  sourceCompatibility = targetCompatibility = 1.8

  eclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'

  [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

  test {
    maxHeapSize = "1024m"
    testLogging {
      events "passed", "skipped", "failed"
      showStandardStreams = project.hasProperty("showStandardStreams") ?: false
      exceptionFormat = 'full'
    }
    jacoco {
      includes = ['reactor/kafka/sender/**', 'reactor/kafka/receiver/**']
    }
  }

  checkstyle {
    configFile = new File(rootDir, "checkstyle/checkstyle.xml")
    configProperties = [suppressionsXml: "$rootDir/checkstyle/suppressions.xml"]
  }
  test.dependsOn('checkstyleMain', 'checkstyleTest')

  jacocoTestReport {
    dependsOn test
    sourceSets sourceSets.main
    reports {
      html.enabled = true
      xml.enabled = true
    }
  }
  jacocoTestReport.dependsOn test

  dependencies {
    compileOnly "com.google.code.findbugs:jsr305:$googleJsr305Version"
    compile "org.apache.kafka:kafka-clients:$kafkaVersion"
    compile "io.projectreactor:reactor-core:$reactorCoreVersion"
//    compile "org.slf4j:slf4j-api:$slf4jVersion"

    testCompileOnly "com.google.code.findbugs:jsr305:$googleJsr305Version"
    testCompile "junit:junit:$junitVersion"

    testCompile "io.projectreactor:reactor-test:$reactorCoreVersion"
    testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
    testCompile "org.powermock:powermock-core:$powermockVersion"
    testCompile "org.powermock:powermock-api-mockito2:$powermockVersion"
    testCompile "org.apache.logging.log4j:log4j-api:$log4jVersion"
    testCompile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    // move to compile for 3.0.0 clients
    testCompile "org.slf4j:slf4j-api:$slf4jVersion"
    testCompile "org.testcontainers:kafka:$testcontainersVersion"
    testCompile 'org.awaitility:awaitility:4.0.2'
    testCompile 'org.assertj:assertj-core:3.16.1'
  }
}

configure(rootProject) {
  archivesBaseName = 'reactor-kafka'
  description = 'Reactor Kafka: A reactive API for Apache Kafka'

  jar {
    manifest {
      attributes 'Automatic-Module-Name': 'reactor.kafka'
    }
  }

  //add specific task artifacts to the publication
  publishing.publications.mavenJava.artifact(docsZip)
}

project(':reactor-kafka-tools') {
  archivesBaseName = 'reactor-kafka-tools'
  description = 'Tools for Reactor Kafka'
  dependencies {
    compile rootProject
    compile "com.yammer.metrics:metrics-core:$metricsVersion"
    compile "net.sf.jopt-simple:jopt-simple:$joptVersion"
    compile "net.sourceforge.argparse4j:argparse4j:$argparseVersion"

    testCompile rootProject.sourceSets.test.output
  }

  test {
    systemProperties System.properties
    jacoco {
      enabled = false
    }
  }

  jar {
    manifest {
      attributes 'Automatic-Module-Name': 'reactor.kafka.tools'
    }
  }
}

project(':reactor-kafka-samples') {
  archivesBaseName = 'reactor-kafka-samples'
  description = 'Samples for Reactor Kafka'
  dependencies {
    compile rootProject
    compile "com.yammer.metrics:metrics-core:$metricsVersion"

    testCompile rootProject.sourceSets.test.output
  }

  test {
    jacoco {
      enabled = false
    }
  }

  jar {
    manifest {
      attributes 'Automatic-Module-Name': 'reactor.kafka.samples'
    }
  }
}



// aggregates jacoco results from the top-level project and subprojects with jacoco enabled and generates a report
task jacocoRootTestReport(type: JacocoReport) {

  def jacocoProjects = allprojects.findAll { it.test.jacoco.enabled }

  logger.info('Aggregating JaCoCo Coverage from projects : {}', jacocoProjects)
  getExecutionData().from(files(jacocoProjects.jacocoTestReport.executionData))
  getSourceDirectories().from(files(jacocoProjects.sourceSets.main.allSource.srcDirs))
  getClassDirectories().from(files(jacocoProjects.sourceSets.main.output))

  reports {
    xml.enabled true
    html.enabled true
  }

  onlyIf = { true }
  doFirst {
    getExecutionData().from(files(executionData.findAll { it.exists() }))
  }
}
jacocoRootTestReport.dependsOn allprojects.test
check.dependsOn jacocoRootTestReport
