/*
 * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven { url "https://repo.spring.io/plugins-release" }
  }
  dependencies {
    classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16',
            'org.springframework.build.gradle:propdeps-plugin:0.0.7',
            'io.spring.gradle:spring-io-plugin:0.0.8.RELEASE'
  }
}
plugins {
  id 'org.asciidoctor.convert' version '1.5.8.1'
}

ext {
  gradleVersion = '4.10'
  gradleScriptDir = "${rootProject.projectDir}/gradle"

  kafkaVersion = '2.0.0'
  scalaVersion = '2.11'
  reactorVersion = '3.2.1.RELEASE'
  metricsVersion = '2.2.0'

  argparseVersion = '0.5.0'
  joptVersion = '4.9'

  slf4jVersion = '1.7.25'
  junitVersion = '4.12'
  zkVersion = "3.4.13"
  powermockVersion = '1.7.4'

  javadocLinks = ["https://docs.oracle.com/javase/8/docs/api/",
                  "https://kafka.apache.org/10/javadoc/",
                  "https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/",
                  "https://projectreactor.io/docs/core/release/api/"] as String[]

}

apply from: "$gradleScriptDir/setup.gradle"
apply from: "$gradleScriptDir/doc.gradle"

configurations.all {
  // check for snapshot updates every time
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

allprojects {
  apply plugin: 'jacoco'
  jacoco {
    toolVersion = '0.8.1'
  }
}

configure(allprojects) { project ->
  group = 'io.projectreactor.kafka'

  repositories {
    maven { url 'https://repo.spring.io/libs-release' }
    maven { url 'https://repo.spring.io/libs-snapshot' }
    mavenCentral()
    jcenter()
  }

  apply plugin: 'maven'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'propdeps'
  apply plugin: 'checkstyle'
  apply plugin: 'java'

  sourceCompatibility = targetCompatibility = 1.8

  eclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'

  [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

  test {
    maxHeapSize = "1024m"
    testLogging {
      events "passed", "skipped", "failed"
      showStandardStreams = project.hasProperty("showStandardStreams") ?: false
      exceptionFormat = 'full'
    }
    jacoco {
      includes = ['reactor/kafka/sender/**', 'reactor/kafka/receiver/**']
    }
  }

  checkstyle {
    configFile = new File(rootDir, "checkstyle/checkstyle.xml")
    configProperties = [suppressionsXml: "$rootDir/checkstyle/suppressions.xml"]
  }
  test.dependsOn('checkstyleMain', 'checkstyleTest')

  jacocoTestReport {
    dependsOn test
    sourceSets sourceSets.main
    reports {
      html.enabled = true
      xml.enabled = true
    }
  }
  jacocoTestReport.dependsOn test

  dependencies {
    compile "org.apache.kafka:kafka-clients:$kafkaVersion"
    compile "io.projectreactor:reactor-core:$reactorVersion"

    testCompile "org.apache.kafka:kafka-clients:$kafkaVersion:test"
    testCompile "junit:junit:$junitVersion"

    testCompile "io.projectreactor:reactor-test:$reactorVersion"
    testCompile "org.apache.zookeeper:zookeeper:$zkVersion"
    testCompile "org.apache.kafka:kafka_$scalaVersion:$kafkaVersion"
    testCompile "org.apache.kafka:kafka-clients:$kafkaVersion:test"
    testCompile "org.apache.kafka:kafka_$scalaVersion:$kafkaVersion:test"
    testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
    testCompile "org.powermock:powermock-core:$powermockVersion"
    testCompile "org.powermock:powermock-api-mockito:$powermockVersion"
    testCompile "org.slf4j:slf4j-api:$slf4jVersion"
    testCompile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    testCompile 'io.projectreactor.tools:blockhound:1.0.0.M1'
  }
}

configure(rootProject) {
  archivesBaseName = 'reactor-kafka'
  description = 'Reactor Kafka: A reactive API for Apache Kafka'

  artifacts {
    archives sourcesJar
    archives javadocJar
    archives docsZip
  }
}

project(':reactor-kafka-tools') {
  archivesBaseName = 'reactor-kafka-tools'
  description = 'Tools for Reactor Kafka'
  dependencies {
    compile rootProject
    compile "com.yammer.metrics:metrics-core:$metricsVersion"
    compile "net.sf.jopt-simple:jopt-simple:$joptVersion"
    compile "net.sourceforge.argparse4j:argparse4j:$argparseVersion"

    testCompile rootProject.sourceSets.test.output
  }

  test {
    systemProperties System.properties
    jacoco {
      enabled = false
    }
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }
}

project(':reactor-kafka-samples') {
  archivesBaseName = 'reactor-kafka-samples'
  description = 'Samples for Reactor Kafka'
  dependencies {
    compile rootProject
    compile "com.yammer.metrics:metrics-core:$metricsVersion"

    testCompile rootProject.sourceSets.test.output
  }

  task classpath << {
    println sourceSets.main.runtimeClasspath.asPath
  }

  test {
    jacoco {
      enabled = false
    }
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }
}



// aggregates jacoco results from the top-level project and subprojects with jacoco enabled and generates a report
task jacocoRootTestReport(type: JacocoReport) {

  def jacocoProjects = allprojects.findAll { it.test.jacoco.enabled }

  logger.info('Aggregating JaCoCo Coverage from projects : {}', jacocoProjects)
  executionData = files(jacocoProjects.jacocoTestReport.executionData)
  sourceDirectories = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
  classDirectories =  files(jacocoProjects.sourceSets.main.output)

  reports {
    xml.enabled true
    html.enabled true
  }

  onlyIf = { true }
  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}
jacocoRootTestReport.dependsOn allprojects.test
check.dependsOn jacocoRootTestReport

