/*
 * Copyright (c) 2011-2022 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/plugins-release" }
  }
}

plugins {
//  alias(libs.plugins.asciidoctor.convert) apply false
//  alias(libs.plugins.asciidoctor.pdf) apply false
//  alias(libs.plugins.artifactory) apply false
  id "org.asciidoctor.jvm.convert" version "3.3.2" apply false
  id "org.asciidoctor.jvm.pdf" version "3.3.2" apply false
  id "com.jfrog.artifactory" version "4.15.2" apply false
}

ext {
  //NOTE: all dependencies, including plugins, are defined in gradle/libs.versions.toml catalog

  //TODO add versions to catalog
  kafkaVersion = '2.8.1'
  kafkaDocVersion = "28"
  scalaVersion = '2.11'
  metricsVersion = '2.2.0'

  googleJsr305Version = '3.0.2'
  argparseVersion = '0.5.0'
  joptVersion = '4.9'

  slf4jVersion = '1.7.30'
  log4jVersion = '2.17.1'
  junitVersion = '4.12'
  powermockVersion = '1.7.4'
  testcontainersVersion = '1.16.2'

  jdk = JavaVersion.current().majorVersion
  jdkJavadoc = "https://docs.oracle.com/javase/$jdk/docs/api/"
  if (JavaVersion.current().isJava11Compatible()) {
    jdkJavadoc = "https://docs.oracle.com/en/java/javase/$jdk/docs/api/"
  }
  javadocLinks = [
    jdkJavadoc,
//    "https://projectreactor.io/docs/core/${libs.versions.reactorCore.get()}/api/",
    "https://projectreactor.io/docs/core/release/api/",
//    "https://www.reactive-streams.org/reactive-streams-${libs.versions.reactiveStreams.get()}-javadoc/"
    "https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
//    "https://kafka.apache.org/${libs.versions.kafka.doc.get()}/javadoc/"
    "https://kafka.apache.org/28/javadoc/"
  ] as String[]
}

apply from: "${rootDir}/gradle/asciidoc.gradle"
apply from: "${rootDir}/gradle/releaser.gradle"

configurations.all {
  // check for snapshot updates every time
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configure(allprojects) { project ->
  group = 'io.projectreactor.kafka'

  repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }

    if (version.endsWith('-SNAPSHOT')) {
      maven { url 'https://repo.spring.io/snapshot' }
    }
  }

  apply plugin: 'java-library'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'checkstyle'
  apply plugin: 'jacoco'
  apply from: "${rootDir}/gradle/setup.gradle"
  apply from: "${rootDir}/gradle/javadoc.gradle"

  sourceCompatibility = targetCompatibility = 1.8

  [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

  test {
    maxHeapSize = "1024m"
    testLogging {
      events "passed", "skipped", "failed"
      showStandardStreams = project.hasProperty("showStandardStreams") ?: false
      exceptionFormat = 'full'
    }
    jacoco {
      includes = ['reactor/kafka/sender/**', 'reactor/kafka/receiver/**']
    }
  }

  checkstyle {
    configFile = new File(rootDir, "checkstyle/checkstyle.xml")
    configProperties = [suppressionsXml: "$rootDir/checkstyle/suppressions.xml"]
  }
  test.dependsOn('checkstyleMain', 'checkstyleTest')

  jacocoTestReport {
    dependsOn test
    sourceSets sourceSets.main
    reports {
      html.enabled = true
      xml.enabled = true
    }
  }
  jacocoTestReport.dependsOn test

  dependencies {
    api "org.apache.kafka:kafka-clients:$kafkaVersion"
    api "io.projectreactor:reactor-core:$reactorCoreVersion"

    compileOnly "com.google.code.findbugs:jsr305:$googleJsr305Version"
    testCompileOnly "com.google.code.findbugs:jsr305:$googleJsr305Version"
//    compile "org.slf4j:slf4j-api:$slf4jVersion"

    testImplementation "junit:junit:$junitVersion"

    testImplementation "io.projectreactor:reactor-test:$reactorCoreVersion"
    testImplementation "org.powermock:powermock-module-junit4:$powermockVersion"
    testImplementation "org.powermock:powermock-core:$powermockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powermockVersion"
    testImplementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    testImplementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    // move to compile for 3.0.0 clients
    testCompileOnly "org.slf4j:slf4j-api:$slf4jVersion"
    testImplementation "org.testcontainers:kafka:$testcontainersVersion"
    testImplementation 'org.awaitility:awaitility:4.0.2'
    testImplementation 'org.assertj:assertj-core:3.16.1'
  }
}

configure(rootProject) {
  archivesBaseName = 'reactor-kafka'
  description = 'Reactor Kafka: A reactive API for Apache Kafka'

  jar {
    manifest {
      attributes 'Automatic-Module-Name': 'reactor.kafka'
    }
  }

  //add specific task artifacts to the publication
  publishing.publications.mavenJava.artifact(docsZip)
}

project(':reactor-kafka-tools') {
  archivesBaseName = 'reactor-kafka-tools'
  description = 'Tools for Reactor Kafka'
  dependencies {
    implementation rootProject
    implementation "com.yammer.metrics:metrics-core:$metricsVersion"
    implementation "net.sf.jopt-simple:jopt-simple:$joptVersion"
    implementation "net.sourceforge.argparse4j:argparse4j:$argparseVersion"

    testImplementation rootProject.sourceSets.test.output
  }

  test {
    systemProperties System.properties
    jacoco {
      enabled = false
    }
  }

  jar {
    manifest {
      attributes 'Automatic-Module-Name': 'reactor.kafka.tools'
    }
  }
}

project(':reactor-kafka-samples') {
  archivesBaseName = 'reactor-kafka-samples'
  description = 'Samples for Reactor Kafka'
  dependencies {
    implementation rootProject
    implementation "com.yammer.metrics:metrics-core:$metricsVersion"

    testImplementation rootProject.sourceSets.test.output
  }

  test {
    jacoco {
      enabled = false
    }
  }

  jar {
    manifest {
      attributes 'Automatic-Module-Name': 'reactor.kafka.samples'
    }
  }
}



// aggregates jacoco results from the top-level project and subprojects with jacoco enabled and generates a report
task jacocoRootTestReport(type: JacocoReport) {

  def jacocoProjects = allprojects.findAll { it.test.jacoco.enabled }

  logger.info('Aggregating JaCoCo Coverage from projects : {}', jacocoProjects)
  getExecutionData().from(files(jacocoProjects.jacocoTestReport.executionData))
  getSourceDirectories().from(files(jacocoProjects.sourceSets.main.allSource.srcDirs))
  getClassDirectories().from(files(jacocoProjects.sourceSets.main.output))

  reports {
    xml.enabled true
    html.enabled true
  }

  onlyIf = { true }
  doFirst {
    getExecutionData().from(files(executionData.findAll { it.exists() }))
  }
}
jacocoRootTestReport.dependsOn allprojects.test
check.dependsOn jacocoRootTestReport
